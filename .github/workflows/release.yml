name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: py-license-auditor-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: py-license-auditor-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: py-license-auditor-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: py-license-auditor-macos-aarch64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Rename binary
      run: |
        cp target/${{ matrix.target }}/release/py-license-auditor ${{ matrix.binary_name }}
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.binary_name }}
        path: ${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: pip install build twine
    
    - name: Copy binaries to Python package
      run: |
        mkdir -p python/py_license_auditor/bin
        cp py-license-auditor-linux-x86_64/py-license-auditor-linux-x86_64 python/py_license_auditor/bin/
        cp py-license-auditor-linux-aarch64/py-license-auditor-linux-aarch64 python/py_license_auditor/bin/
        cp py-license-auditor-macos-x86_64/py-license-auditor-macos-x86_64 python/py_license_auditor/bin/
        cp py-license-auditor-macos-aarch64/py-license-auditor-macos-aarch64 python/py_license_auditor/bin/
        chmod +x python/py_license_auditor/bin/*
    
    - name: Build Python package
      run: python -m build
    
    - name: Publish to PyPI
      run: python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          py-license-auditor-linux-x86_64/py-license-auditor-linux-x86_64
          py-license-auditor-linux-aarch64/py-license-auditor-linux-aarch64
          py-license-auditor-macos-x86_64/py-license-auditor-macos-x86_64
          py-license-auditor-macos-aarch64/py-license-auditor-macos-aarch64
        body: |
          ## üöÄ Multi-Platform Support!
          
          ```bash
          # Install with uv tool (all platforms)
          uv tool install py-license-auditor
          
          # Use in uv projects
          cd my-uv-project
          uv tool run py-license-auditor
          ```
          
          ### üåç Platform Support
          - ‚úÖ **Linux x86_64** - Intel/AMD 64-bit
          - ‚úÖ **Linux ARM64** - ARM 64-bit (servers/cloud)
          - ‚úÖ **macOS x86_64** - Intel Mac
          - ‚úÖ **macOS ARM64** - Apple Silicon (M1/M2/M3)
          
          ### ‚ö° Performance
          - **20x faster**: Parallel processing
          - **Sub-second scanning**: 0.032s for typical projects
          - **Memory optimized**: Efficient data structures
          
          ### üõ°Ô∏è Reliability
          - **Robust uv.lock parsing**: Better error handling
          - **Package validation**: Filter invalid entries
          - **Clear diagnostics**: Helpful error messages
          
          ### üì¶ Features
          - ‚úÖ Native uv.lock support
          - ‚úÖ uv tool integration
          - ‚úÖ Policy-based license checking
          - ‚úÖ Auto-detection (zero config)
          - ‚úÖ Multiple output formats (JSON, TOML)
          
          **Perfect for uv users on any Unix platform!**
